<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="486.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="469" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="469" > </text>
<g id="frames">
<g >
<title>block_write_end (30,303,030 samples, 0.65%)</title><rect x="22.9" y="197" width="7.7" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="25.85" y="207.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.22%)</title><rect x="1136.0" y="405" width="2.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1139.01" y="415.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.44%)</title><rect x="992.0" y="325" width="5.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="995.05" y="335.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (1,242,424,230 samples, 26.80%)</title><rect x="71.7" y="341" width="316.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="74.70" y="351.5" >clock_gettime@@GLIBC_2.17</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (10,101,010 samples, 0.22%)</title><rect x="1179.7" y="405" width="2.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1182.72" y="415.5" ></text>
</g>
<g >
<title>x64_sys_call (80,808,080 samples, 1.74%)</title><rect x="10.0" y="341" width="20.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>handle_softirqs (10,101,010 samples, 0.22%)</title><rect x="930.3" y="261" width="2.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="933.35" y="271.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (10,101,010 samples, 0.22%)</title><rect x="17.7" y="149" width="2.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="20.71" y="159.5" ></text>
</g>
<g >
<title>malloc_consolidate (60,606,060 samples, 1.31%)</title><rect x="1164.3" y="405" width="15.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1167.29" y="415.5" ></text>
</g>
<g >
<title>vbg_heartbeat_timer (10,101,010 samples, 0.22%)</title><rect x="385.3" y="181" width="2.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="388.34" y="191.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (10,101,010 samples, 0.22%)</title><rect x="10.0" y="181" width="2.6" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (10,101,010 samples, 0.22%)</title><rect x="1084.6" y="341" width="2.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1087.60" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.22%)</title><rect x="385.3" y="277" width="2.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="388.34" y="287.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (10,101,010 samples, 0.22%)</title><rect x="15.1" y="181" width="2.6" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="18.14" y="191.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10,101,010 samples, 0.22%)</title><rect x="20.3" y="133" width="2.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="23.28" y="143.5" ></text>
</g>
<g >
<title>all (4,636,363,590 samples, 100%)</title><rect x="10.0" y="437" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.22%)</title><rect x="1084.6" y="373" width="2.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1087.60" y="383.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (60,606,060 samples, 1.31%)</title><rect x="1066.6" y="325" width="15.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1069.60" y="335.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (60,606,060 samples, 1.31%)</title><rect x="15.1" y="245" width="15.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="18.14" y="255.5" ></text>
</g>
<g >
<title>run_timer_softirq (10,101,010 samples, 0.22%)</title><rect x="385.3" y="229" width="2.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="388.34" y="239.5" ></text>
</g>
<g >
<title>journal_end_buffer_io_sync (10,101,010 samples, 0.22%)</title><rect x="907.2" y="101" width="2.6" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="910.21" y="111.5" ></text>
</g>
<g >
<title>ext4_da_write_end (30,303,030 samples, 0.65%)</title><rect x="22.9" y="213" width="7.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="25.85" y="223.5" ></text>
</g>
<g >
<title>benchmark::internal::BenchmarkRunner::DoNIterations (4,030,302,990 samples, 86.93%)</title><rect x="58.8" y="389" width="1025.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="61.85" y="399.5" >benchmark::internal::BenchmarkRunner::DoNIterations</text>
</g>
<g >
<title>file_modified (10,101,010 samples, 0.22%)</title><rect x="15.1" y="229" width="2.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="18.14" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, GoodHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.22%)</title><rect x="912.4" y="341" width="2.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="915.35" y="351.5" ></text>
</g>
<g >
<title>call_timer_fn (10,101,010 samples, 0.22%)</title><rect x="385.3" y="197" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="388.34" y="207.5" ></text>
</g>
<g >
<title>handle_softirqs (10,101,010 samples, 0.22%)</title><rect x="385.3" y="245" width="2.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="388.34" y="255.5" ></text>
</g>
<g >
<title>void BM_Erase&lt;std::unordered_map, GoodHash&gt; (202,020,200 samples, 4.36%)</title><rect x="945.8" y="341" width="51.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="948.77" y="351.5" >void ..</text>
</g>
<g >
<title>fsnotify_insert_event (10,101,010 samples, 0.22%)</title><rect x="12.6" y="197" width="2.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="15.57" y="207.5" ></text>
</g>
<g >
<title>__block_commit_write (30,303,030 samples, 0.65%)</title><rect x="22.9" y="181" width="7.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="25.85" y="191.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.22%)</title><rect x="28.0" y="133" width="2.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="31.00" y="143.5" ></text>
</g>
<g >
<title>generic_perform_write (50,505,050 samples, 1.09%)</title><rect x="17.7" y="229" width="12.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="20.71" y="239.5" ></text>
</g>
<g >
<title>inotify_handle_inode_event (20,202,020 samples, 0.44%)</title><rect x="10.0" y="213" width="5.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>malloc (101,010,100 samples, 2.18%)</title><rect x="1138.6" y="405" width="25.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1141.58" y="415.5" >m..</text>
</g>
<g >
<title>blk_done_softirq (10,101,010 samples, 0.22%)</title><rect x="907.2" y="245" width="2.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="910.21" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="373" width="2.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1136.44" y="383.5" ></text>
</g>
<g >
<title>folio_alloc (10,101,010 samples, 0.22%)</title><rect x="17.7" y="165" width="2.6" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="20.71" y="175.5" ></text>
</g>
<g >
<title>benchmark::internal::BenchmarkInstance::Run (4,030,302,990 samples, 86.93%)</title><rect x="58.8" y="357" width="1025.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="61.85" y="367.5" >benchmark::internal::BenchmarkInstance::Run</text>
</g>
<g >
<title>rmqueue_bulk (10,101,010 samples, 0.22%)</title><rect x="17.7" y="69" width="2.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="20.71" y="79.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,101,010 samples, 0.22%)</title><rect x="385.3" y="293" width="2.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="388.34" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="293" width="2.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1136.44" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (181,818,180 samples, 3.92%)</title><rect x="1089.7" y="405" width="46.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1092.74" y="415.5" >_int..</text>
</g>
<g >
<title>handle_softirqs (20,202,020 samples, 0.44%)</title><rect x="907.2" y="261" width="5.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="910.21" y="271.5" ></text>
</g>
<g >
<title>generic_update_time (10,101,010 samples, 0.22%)</title><rect x="15.1" y="213" width="2.6" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="18.14" y="223.5" ></text>
</g>
<g >
<title>__wake_up (10,101,010 samples, 0.22%)</title><rect x="12.6" y="181" width="2.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="15.57" y="191.5" ></text>
</g>
<g >
<title>___slab_alloc (10,101,010 samples, 0.22%)</title><rect x="20.3" y="117" width="2.6" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="23.28" y="127.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (20,202,020 samples, 0.44%)</title><rect x="907.2" y="277" width="5.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="910.21" y="287.5" ></text>
</g>
<g >
<title>hack_digit (10,101,010 samples, 0.22%)</title><rect x="40.8" y="373" width="2.6" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="43.85" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.22%)</title><rect x="20.3" y="53" width="2.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="23.28" y="63.5" ></text>
</g>
<g >
<title>operator new (20,202,020 samples, 0.44%)</title><rect x="395.6" y="341" width="5.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="398.62" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.44%)</title><rect x="387.9" y="341" width="5.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="390.91" y="351.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (10,101,010 samples, 0.22%)</title><rect x="15.1" y="165" width="2.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="18.14" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="341" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1136.44" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (20,202,020 samples, 0.44%)</title><rect x="907.2" y="293" width="5.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="910.21" y="303.5" ></text>
</g>
<g >
<title>handle_pte_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="309" width="2.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1136.44" y="319.5" ></text>
</g>
<g >
<title>benchmark::internal::(anonymous namespace)::RunInThread (4,030,302,990 samples, 86.93%)</title><rect x="58.8" y="373" width="1025.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="61.85" y="383.5" >benchmark::internal::(anonymous namespace)::RunInThread</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,101,010 samples, 0.22%)</title><rect x="385.3" y="309" width="2.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="388.34" y="319.5" ></text>
</g>
<g >
<title>scsi_complete (10,101,010 samples, 0.22%)</title><rect x="907.2" y="213" width="2.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="910.21" y="223.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (10,101,010 samples, 0.22%)</title><rect x="15.1" y="133" width="2.6" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="18.14" y="143.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.22%)</title><rect x="17.7" y="101" width="2.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="20.71" y="111.5" ></text>
</g>
<g >
<title>[unknown] (4,232,323,190 samples, 91.29%)</title><rect x="10.0" y="405" width="1077.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >[unknown]</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (20,202,020 samples, 0.44%)</title><rect x="907.2" y="325" width="5.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="910.21" y="335.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="357" width="2.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1136.44" y="367.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.22%)</title><rect x="1087.2" y="405" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1090.17" y="415.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="389" width="2.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1136.44" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="325" width="2.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1136.44" y="335.5" ></text>
</g>
<g >
<title>do_writev (80,808,080 samples, 1.74%)</title><rect x="10.0" y="309" width="20.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>call_timer_fn (10,101,010 samples, 0.22%)</title><rect x="909.8" y="213" width="2.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="912.78" y="223.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (20,202,020 samples, 0.44%)</title><rect x="907.2" y="309" width="5.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="910.21" y="319.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (20,202,020 samples, 0.44%)</title><rect x="35.7" y="373" width="5.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="38.71" y="383.5" ></text>
</g>
<g >
<title>blk_complete_reqs (10,101,010 samples, 0.22%)</title><rect x="907.2" y="229" width="2.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="910.21" y="239.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,101,010 samples, 0.22%)</title><rect x="930.3" y="277" width="2.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="933.35" y="287.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,101,010 samples, 0.22%)</title><rect x="930.3" y="325" width="2.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="933.35" y="335.5" ></text>
</g>
<g >
<title>__folio_mark_dirty (10,101,010 samples, 0.22%)</title><rect x="28.0" y="149" width="2.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="31.00" y="159.5" ></text>
</g>
<g >
<title>__x64_sys_writev (80,808,080 samples, 1.74%)</title><rect x="10.0" y="325" width="20.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, BadHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (2,010,100,990 samples, 43.36%)</title><rect x="400.8" y="341" width="511.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="403.76" y="351.5" >std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;c..</text>
</g>
<g >
<title>do_syscall_64 (80,808,080 samples, 1.74%)</title><rect x="10.0" y="357" width="20.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.22%)</title><rect x="1082.0" y="341" width="2.6" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1085.03" y="351.5" ></text>
</g>
<g >
<title>__run_timers (10,101,010 samples, 0.22%)</title><rect x="385.3" y="213" width="2.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="388.34" y="223.5" ></text>
</g>
<g >
<title>vbg_req_perform (10,101,010 samples, 0.22%)</title><rect x="385.3" y="165" width="2.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="388.34" y="175.5" ></text>
</g>
<g >
<title>send_to_group (20,202,020 samples, 0.44%)</title><rect x="10.0" y="245" width="5.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>vbg_req_perform (10,101,010 samples, 0.22%)</title><rect x="909.8" y="181" width="2.6" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="912.78" y="191.5" ></text>
</g>
<g >
<title>filemap_alloc_folio (10,101,010 samples, 0.22%)</title><rect x="17.7" y="181" width="2.6" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="20.71" y="191.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (20,202,020 samples, 0.44%)</title><rect x="25.4" y="165" width="5.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="28.42" y="175.5" ></text>
</g>
<g >
<title>bio_endio (10,101,010 samples, 0.22%)</title><rect x="907.2" y="133" width="2.6" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="910.21" y="143.5" ></text>
</g>
<g >
<title>refill_obj_stock (10,101,010 samples, 0.22%)</title><rect x="10.0" y="165" width="2.6" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>run_timer_softirq (10,101,010 samples, 0.22%)</title><rect x="909.8" y="245" width="2.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="912.78" y="255.5" ></text>
</g>
<g >
<title>void BM_Erase&lt;std::unordered_map, MediumHash&gt; (333,333,330 samples, 7.19%)</title><rect x="997.2" y="341" width="84.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1000.19" y="351.5" >void BM_E..</text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,101,010 samples, 0.22%)</title><rect x="930.3" y="309" width="2.6" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="933.35" y="319.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.22%)</title><rect x="17.7" y="133" width="2.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="20.71" y="143.5" ></text>
</g>
<g >
<title>__GI___writev (80,808,080 samples, 1.74%)</title><rect x="10.0" y="389" width="20.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (20,202,020 samples, 0.44%)</title><rect x="17.7" y="213" width="5.2" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="20.71" y="223.5" ></text>
</g>
<g >
<title>[[vdso]] (40,404,040 samples, 0.87%)</title><rect x="58.8" y="341" width="10.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="61.85" y="351.5" ></text>
</g>
<g >
<title>create_empty_buffers (10,101,010 samples, 0.22%)</title><rect x="20.3" y="181" width="2.6" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="23.28" y="191.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (10,101,010 samples, 0.22%)</title><rect x="1061.5" y="325" width="2.5" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1064.46" y="335.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (30,303,030 samples, 0.65%)</title><rect x="1182.3" y="405" width="7.7" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1185.29" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.22%)</title><rect x="932.9" y="341" width="2.6" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="935.92" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.22%)</title><rect x="907.2" y="53" width="2.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="910.21" y="63.5" ></text>
</g>
<g >
<title>scsi_io_completion (10,101,010 samples, 0.22%)</title><rect x="907.2" y="181" width="2.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="910.21" y="191.5" ></text>
</g>
<g >
<title>jbd2__journal_start (10,101,010 samples, 0.22%)</title><rect x="15.1" y="149" width="2.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="18.14" y="159.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (60,606,060 samples, 1.31%)</title><rect x="15.1" y="261" width="15.5" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="18.14" y="271.5" ></text>
</g>
<g >
<title>vfs_writev (80,808,080 samples, 1.74%)</title><rect x="10.0" y="293" width="20.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.22%)</title><rect x="1064.0" y="325" width="2.6" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1067.03" y="335.5" ></text>
</g>
<g >
<title>end_bio_bh_io_sync (10,101,010 samples, 0.22%)</title><rect x="907.2" y="117" width="2.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="910.21" y="127.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.22%)</title><rect x="1084.6" y="357" width="2.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1087.60" y="367.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.22%)</title><rect x="930.3" y="293" width="2.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="933.35" y="303.5" ></text>
</g>
<g >
<title>scsi_end_request (10,101,010 samples, 0.22%)</title><rect x="907.2" y="165" width="2.6" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="910.21" y="175.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.22%)</title><rect x="20.3" y="69" width="2.6" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="23.28" y="79.5" ></text>
</g>
<g >
<title>new_slab (10,101,010 samples, 0.22%)</title><rect x="20.3" y="101" width="2.6" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="23.28" y="111.5" ></text>
</g>
<g >
<title>scsi_finish_command (10,101,010 samples, 0.22%)</title><rect x="907.2" y="197" width="2.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="910.21" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (80,808,080 samples, 1.74%)</title><rect x="10.0" y="373" width="20.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>benchmark::State::PauseTiming (10,101,010 samples, 0.22%)</title><rect x="69.1" y="341" width="2.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="72.13" y="351.5" ></text>
</g>
<g >
<title>wake_up_bit (10,101,010 samples, 0.22%)</title><rect x="907.2" y="69" width="2.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="910.21" y="79.5" ></text>
</g>
<g >
<title>fsnotify_handle_inode_event.isra.0 (20,202,020 samples, 0.44%)</title><rect x="10.0" y="229" width="5.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>vbg_heartbeat_timer (10,101,010 samples, 0.22%)</title><rect x="909.8" y="197" width="2.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="912.78" y="207.5" ></text>
</g>
<g >
<title>memcpy@plt (20,202,020 samples, 0.44%)</title><rect x="986.9" y="325" width="5.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="989.91" y="335.5" ></text>
</g>
<g >
<title>__vfprintf_internal (50,505,050 samples, 1.09%)</title><rect x="30.6" y="389" width="12.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="33.57" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.22%)</title><rect x="17.7" y="117" width="2.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="20.71" y="127.5" ></text>
</g>
<g >
<title>__filemap_get_folio (10,101,010 samples, 0.22%)</title><rect x="17.7" y="197" width="2.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="20.71" y="207.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (10,101,010 samples, 0.22%)</title><rect x="17.7" y="85" width="2.6" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="20.71" y="95.5" ></text>
</g>
<g >
<title>clear_page_rep (10,101,010 samples, 0.22%)</title><rect x="20.3" y="37" width="2.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="23.28" y="47.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.22%)</title><rect x="393.1" y="341" width="2.5" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="396.05" y="351.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,101,010 samples, 0.22%)</title><rect x="385.3" y="261" width="2.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="388.34" y="271.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (40,404,040 samples, 0.87%)</title><rect x="935.5" y="341" width="10.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="938.49" y="351.5" ></text>
</g>
<g >
<title>__fsnotify_parent (20,202,020 samples, 0.44%)</title><rect x="10.0" y="277" width="5.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>lab1 (4,636,363,590 samples, 100.00%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >lab1</text>
</g>
<g >
<title>[[vdso]] (1,191,919,180 samples, 25.71%)</title><rect x="84.6" y="325" width="303.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="87.55" y="335.5" >[[vdso]]</text>
</g>
<g >
<title>__run_timers (10,101,010 samples, 0.22%)</title><rect x="909.8" y="229" width="2.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="912.78" y="239.5" ></text>
</g>
<g >
<title>virtual thunk to std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ofstream (10,101,010 samples, 0.22%)</title><rect x="1084.6" y="389" width="2.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1087.60" y="399.5" ></text>
</g>
<g >
<title>pfn_pte (10,101,010 samples, 0.22%)</title><rect x="1133.4" y="277" width="2.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1136.44" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, MediumHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (70,707,070 samples, 1.53%)</title><rect x="914.9" y="341" width="18.0" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="917.92" y="351.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (60,606,060 samples, 1.31%)</title><rect x="15.1" y="277" width="15.5" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="18.14" y="287.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (10,101,010 samples, 0.22%)</title><rect x="20.3" y="197" width="2.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="23.28" y="207.5" ></text>
</g>
<g >
<title>folio_alloc_buffers (10,101,010 samples, 0.22%)</title><rect x="20.3" y="165" width="2.6" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="23.28" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.22%)</title><rect x="17.7" y="53" width="2.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="20.71" y="63.5" ></text>
</g>
<g >
<title>alloc_buffer_head (10,101,010 samples, 0.22%)</title><rect x="20.3" y="149" width="2.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="23.28" y="159.5" ></text>
</g>
<g >
<title>_int_free (60,606,060 samples, 1.31%)</title><rect x="43.4" y="389" width="15.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="46.42" y="399.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (30,303,030 samples, 0.65%)</title><rect x="979.2" y="325" width="7.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="982.19" y="335.5" ></text>
</g>
<g >
<title>unlock_buffer (10,101,010 samples, 0.22%)</title><rect x="907.2" y="85" width="2.6" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="910.21" y="95.5" ></text>
</g>
<g >
<title>blk_update_request (10,101,010 samples, 0.22%)</title><rect x="907.2" y="149" width="2.6" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="910.21" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.22%)</title><rect x="12.6" y="165" width="2.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="15.57" y="175.5" ></text>
</g>
<g >
<title>__kmalloc (10,101,010 samples, 0.22%)</title><rect x="10.0" y="197" width="2.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>fsnotify (20,202,020 samples, 0.44%)</title><rect x="10.0" y="261" width="5.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (10,101,010 samples, 0.22%)</title><rect x="15.1" y="197" width="2.6" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="18.14" y="207.5" ></text>
</g>
<g >
<title>allocate_slab (10,101,010 samples, 0.22%)</title><rect x="20.3" y="85" width="2.6" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="23.28" y="95.5" ></text>
</g>
</g>
</svg>
