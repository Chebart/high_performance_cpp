<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1157.8" y="437" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1160.81" y="447.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="453" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1189.92" y="463.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.01%)</title><rect x="1150.6" y="453" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1153.56" y="463.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (70,707,070 samples, 0.07%)</title><rect x="33.6" y="469" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="36.62" y="479.5" ></text>
</g>
<g >
<title>__pte_offset_map (10,101,010 samples, 0.01%)</title><rect x="1136.3" y="293" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1139.28" y="303.5" ></text>
</g>
<g >
<title>irqentry_exit (10,101,010 samples, 0.01%)</title><rect x="1142.8" y="405" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1145.76" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (40,404,040 samples, 0.04%)</title><rect x="1175.5" y="373" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1178.50" y="383.5" ></text>
</g>
<g >
<title>clear_page_rep (80,808,080 samples, 0.07%)</title><rect x="1137.1" y="229" width="0.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1140.05" y="239.5" ></text>
</g>
<g >
<title>release_pages (40,404,040 samples, 0.04%)</title><rect x="11.2" y="341" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.21" y="351.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (80,808,080 samples, 0.07%)</title><rect x="1177.0" y="533" width="0.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1180.04" y="543.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (10,101,010 samples, 0.01%)</title><rect x="10.7" y="373" width="0.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="13.66" y="383.5" ></text>
</g>
<g >
<title>void BM_Erase&lt;OwnHashMap, BadHash&gt; (102,848,483,820 samples, 94.79%)</title><rect x="34.4" y="469" width="1118.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="37.39" y="479.5" >void BM_Erase&lt;OwnHashMap, BadHash&gt;</text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (101,010,100 samples, 0.09%)</title><rect x="1151.3" y="453" width="1.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1154.33" y="463.5" ></text>
</g>
<g >
<title>get_page_from_freelist (40,404,040 samples, 0.04%)</title><rect x="1175.5" y="341" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1178.50" y="351.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (10,101,010 samples, 0.01%)</title><rect x="10.7" y="341" width="0.1" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="13.66" y="351.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (10,101,010 samples, 0.01%)</title><rect x="10.5" y="517" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.55" y="527.5" ></text>
</g>
<g >
<title>__ip_queue_xmit (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="213" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1148.51" y="223.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.01%)</title><rect x="10.1" y="485" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.11" y="495.5" ></text>
</g>
<g >
<title>handle_pte_fault (292,929,290 samples, 0.27%)</title><rect x="1135.5" y="341" width="3.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1138.51" y="351.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsputn_2 (10,101,010 samples, 0.01%)</title><rect x="1186.7" y="533" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1189.70" y="543.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (10,101,010 samples, 0.01%)</title><rect x="1164.6" y="437" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1167.62" y="447.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, BadHash&gt;::insert (10,101,010 samples, 0.01%)</title><rect x="16.0" y="469" width="0.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="19.04" y="479.5" ></text>
</g>
<g >
<title>handle_pte_fault (101,010,100 samples, 0.09%)</title><rect x="1175.5" y="437" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1178.50" y="447.5" ></text>
</g>
<g >
<title>free@plt (10,101,010 samples, 0.01%)</title><rect x="1146.0" y="437" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1148.95" y="447.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.01%)</title><rect x="1158.1" y="437" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1161.14" y="447.5" ></text>
</g>
<g >
<title>rcu_report_qs_rdp (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="325" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1148.18" y="335.5" ></text>
</g>
<g >
<title>exc_page_fault (20,202,020 samples, 0.02%)</title><rect x="1164.1" y="405" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1167.08" y="415.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="357" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1169.27" y="367.5" ></text>
</g>
<g >
<title>unmap_single_vma (90,909,090 samples, 0.08%)</title><rect x="11.6" y="373" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="14.65" y="383.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="1156.9" y="421" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1159.94" y="431.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (30,303,030 samples, 0.03%)</title><rect x="1163.7" y="421" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1166.75" y="431.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (262,626,260 samples, 0.24%)</title><rect x="1142.9" y="437" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1145.87" y="447.5" ></text>
</g>
<g >
<title>virtual thunk to std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ofstream (10,101,010 samples, 0.01%)</title><rect x="1166.5" y="517" width="0.1" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1169.49" y="527.5" ></text>
</g>
<g >
<title>ip_queue_xmit (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="229" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1148.51" y="239.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (20,202,020 samples, 0.02%)</title><rect x="12.3" y="309" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="15.31" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="517" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1169.71" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.01%)</title><rect x="12.3" y="261" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="15.31" y="271.5" ></text>
</g>
<g >
<title>malloc (70,707,070 samples, 0.07%)</title><rect x="1149.6" y="453" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1152.58" y="463.5" ></text>
</g>
<g >
<title>swake_up_one_online (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="277" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1148.18" y="287.5" ></text>
</g>
<g >
<title>folio_alloc (10,101,010 samples, 0.01%)</title><rect x="10.7" y="293" width="0.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="13.66" y="303.5" ></text>
</g>
<g >
<title>mas_walk (10,101,010 samples, 0.01%)</title><rect x="1164.1" y="357" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1167.08" y="367.5" ></text>
</g>
<g >
<title>handle_pte_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="437" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1189.92" y="447.5" ></text>
</g>
<g >
<title>common_interrupt (10,101,010 samples, 0.01%)</title><rect x="1142.8" y="421" width="0.1" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1145.76" y="431.5" ></text>
</g>
<g >
<title>vma_alloc_folio (131,313,130 samples, 0.12%)</title><rect x="1136.6" y="293" width="1.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1139.61" y="303.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (30,303,030 samples, 0.03%)</title><rect x="1165.4" y="437" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1168.39" y="447.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="11.1" y="341" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="14.10" y="351.5" ></text>
</g>
<g >
<title>swake_up_one (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="261" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="1148.18" y="271.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (10,101,010 samples, 0.01%)</title><rect x="1176.5" y="421" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1179.49" y="431.5" ></text>
</g>
<g >
<title>void BM_Erase&lt;OwnHashMap, MediumHash&gt; (656,565,650 samples, 0.61%)</title><rect x="1159.1" y="469" width="7.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1162.13" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (10,101,010 samples, 0.01%)</title><rect x="10.7" y="277" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="13.66" y="287.5" ></text>
</g>
<g >
<title>kthread_blkcg (10,101,010 samples, 0.01%)</title><rect x="1186.9" y="389" width="0.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1189.92" y="399.5" ></text>
</g>
<g >
<title>_IO_file_close (10,101,010 samples, 0.01%)</title><rect x="1166.6" y="533" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1169.60" y="543.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (10,101,010 samples, 0.01%)</title><rect x="1176.7" y="469" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1179.71" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (343,434,340 samples, 0.32%)</title><rect x="1183.0" y="533" width="3.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1185.97" y="543.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.01%)</title><rect x="1176.3" y="357" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1179.27" y="367.5" ></text>
</g>
<g >
<title>std::ostream&amp; std::ostream::_M_insert&lt;double&gt; (10,101,010 samples, 0.01%)</title><rect x="1166.5" y="485" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1169.49" y="495.5" ></text>
</g>
<g >
<title>__ip_finish_output (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="149" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1148.51" y="159.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (252,525,250 samples, 0.23%)</title><rect x="1142.9" y="389" width="2.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1145.87" y="399.5" ></text>
</g>
<g >
<title>count_memcg_events.constprop.0 (10,101,010 samples, 0.01%)</title><rect x="1176.6" y="453" width="0.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1179.60" y="463.5" ></text>
</g>
<g >
<title>dev_hard_start_xmit (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="53" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1148.51" y="63.5" ></text>
</g>
<g >
<title>__get_free_pages (20,202,020 samples, 0.02%)</title><rect x="12.3" y="293" width="0.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="15.31" y="303.5" ></text>
</g>
<g >
<title>do_writev (10,101,010 samples, 0.01%)</title><rect x="10.7" y="437" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="13.66" y="447.5" ></text>
</g>
<g >
<title>mas_walk (10,101,010 samples, 0.01%)</title><rect x="1176.8" y="469" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1179.82" y="479.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (30,303,030 samples, 0.03%)</title><rect x="1136.0" y="309" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1138.95" y="319.5" ></text>
</g>
<g >
<title>rcu_nocb_unlock_irqrestore.part.0 (10,101,010 samples, 0.01%)</title><rect x="11.1" y="261" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="14.10" y="271.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="485" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1169.71" y="495.5" ></text>
</g>
<g >
<title>rcu_nocb_unlock_irqrestore.part.0 (30,303,030 samples, 0.03%)</title><rect x="1144.9" y="325" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1147.85" y="335.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (30,303,030 samples, 0.03%)</title><rect x="1157.0" y="421" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1160.05" y="431.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (40,404,040 samples, 0.04%)</title><rect x="11.2" y="373" width="0.4" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="14.21" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="469" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1189.92" y="479.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="485" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1179.93" y="495.5" ></text>
</g>
<g >
<title>tcp_delack_timer (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="309" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1148.51" y="319.5" ></text>
</g>
<g >
<title>do_brk_flags (20,202,020 samples, 0.02%)</title><rect x="10.9" y="421" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="13.88" y="431.5" ></text>
</g>
<g >
<title>mas_wr_store_entry.isra.0 (10,101,010 samples, 0.01%)</title><rect x="11.1" y="389" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="14.10" y="399.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="405" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1169.71" y="415.5" ></text>
</g>
<g >
<title>malloc (464,646,460 samples, 0.43%)</title><rect x="1177.9" y="533" width="5.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1180.92" y="543.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.01%)</title><rect x="10.7" y="229" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="13.66" y="239.5" ></text>
</g>
<g >
<title>mas_walk (10,101,010 samples, 0.01%)</title><rect x="1176.7" y="453" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1179.71" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (111,111,110 samples, 0.10%)</title><rect x="1175.5" y="469" width="1.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1178.50" y="479.5" ></text>
</g>
<g >
<title>__filemap_get_folio (10,101,010 samples, 0.01%)</title><rect x="10.7" y="325" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="13.66" y="335.5" ></text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="1146.2" y="437" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1149.17" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.01%)</title><rect x="1164.2" y="389" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1167.19" y="399.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, BadHash&gt;::rehash (676,767,670 samples, 0.62%)</title><rect x="1132.3" y="437" width="7.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1135.33" y="447.5" ></text>
</g>
<g >
<title>folio_remove_rmap_ptes (10,101,010 samples, 0.01%)</title><rect x="12.5" y="309" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="15.53" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="469" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1169.27" y="479.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (10,101,010 samples, 0.01%)</title><rect x="1164.1" y="373" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1167.08" y="383.5" ></text>
</g>
<g >
<title>cap_vm_enough_memory (10,101,010 samples, 0.01%)</title><rect x="11.0" y="389" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="13.99" y="399.5" ></text>
</g>
<g >
<title>clear_page_rep (20,202,020 samples, 0.02%)</title><rect x="1175.5" y="325" width="0.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1178.50" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (101,010,100 samples, 0.09%)</title><rect x="1175.5" y="453" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1178.50" y="463.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (30,303,030 samples, 0.03%)</title><rect x="1138.0" y="309" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1141.04" y="319.5" ></text>
</g>
<g >
<title>__dev_xmit_skb (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="85" width="0.1" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1148.51" y="95.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.01%)</title><rect x="10.7" y="469" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.66" y="479.5" ></text>
</g>
<g >
<title>x64_sys_call (171,717,170 samples, 0.16%)</title><rect x="10.9" y="469" width="1.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.88" y="479.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.01%)</title><rect x="1157.4" y="437" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1160.37" y="447.5" ></text>
</g>
<g >
<title>benchmark::internal::(anonymous namespace)::RunInThread (105,767,675,710 samples, 97.48%)</title><rect x="16.0" y="501" width="1150.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="19.04" y="511.5" >benchmark::internal::(anonymous namespace)::RunInThread</text>
</g>
<g >
<title>__vdso_clock_gettime (10,101,010 samples, 0.01%)</title><rect x="16.5" y="469" width="0.1" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="19.48" y="479.5" ></text>
</g>
<g >
<title>do_anonymous_page (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="421" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1189.92" y="431.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (10,101,010 samples, 0.01%)</title><rect x="1145.6" y="389" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1148.62" y="399.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="421" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1169.71" y="431.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="245" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1148.18" y="255.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1165.7" y="453" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1168.72" y="463.5" ></text>
</g>
<g >
<title>__brk (191,919,190 samples, 0.18%)</title><rect x="10.8" y="517" width="2.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="13.77" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.01%)</title><rect x="12.4" y="245" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="15.42" y="255.5" ></text>
</g>
<g >
<title>mas_wr_store_entry.isra.0 (10,101,010 samples, 0.01%)</title><rect x="10.9" y="389" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="13.88" y="399.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (10,101,010 samples, 0.01%)</title><rect x="1176.4" y="405" width="0.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1179.38" y="415.5" ></text>
</g>
<g >
<title>rcu_report_qs_rnp (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="309" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1148.18" y="319.5" ></text>
</g>
<g >
<title>security_vm_enough_memory_mm (10,101,010 samples, 0.01%)</title><rect x="11.0" y="405" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.99" y="415.5" ></text>
</g>
<g >
<title>rcu_core_si (60,606,060 samples, 0.06%)</title><rect x="1144.9" y="357" width="0.6" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1147.85" y="367.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MediumHash&gt;::insert (10,101,010 samples, 0.01%)</title><rect x="16.3" y="469" width="0.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="19.26" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (10,101,010 samples, 0.01%)</title><rect x="1166.4" y="517" width="0.1" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1169.38" y="527.5" ></text>
</g>
<g >
<title>__tcp_transmit_skb (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="245" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1148.51" y="255.5" ></text>
</g>
<g >
<title>malloc (10,101,010 samples, 0.01%)</title><rect x="1157.5" y="437" width="0.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1160.48" y="447.5" ></text>
</g>
<g >
<title>thread_cpu_clock_get (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="421" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1169.27" y="431.5" ></text>
</g>
<g >
<title>rcu_core (10,101,010 samples, 0.01%)</title><rect x="11.1" y="277" width="0.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="14.10" y="287.5" ></text>
</g>
<g >
<title>[[vdso]] (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="501" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1169.27" y="511.5" ></text>
</g>
<g >
<title>page_counter_try_charge (10,101,010 samples, 0.01%)</title><rect x="1136.2" y="277" width="0.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1139.17" y="287.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (40,404,040 samples, 0.04%)</title><rect x="12.9" y="501" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="15.86" y="511.5" ></text>
</g>
<g >
<title>unmap_vmas (90,909,090 samples, 0.08%)</title><rect x="11.6" y="389" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="14.65" y="399.5" ></text>
</g>
<g >
<title>task_sched_runtime (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="373" width="0.1" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1169.27" y="383.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10,101,010 samples, 0.01%)</title><rect x="1152.7" y="453" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1155.65" y="463.5" ></text>
</g>
<g >
<title>exc_page_fault (151,515,150 samples, 0.14%)</title><rect x="1175.3" y="501" width="1.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1178.28" y="511.5" ></text>
</g>
<g >
<title>unmap_region (131,313,130 samples, 0.12%)</title><rect x="11.2" y="405" width="1.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="14.21" y="415.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (30,303,030 samples, 0.03%)</title><rect x="1176.0" y="373" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1179.05" y="383.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="453" width="0.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1169.71" y="463.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (40,404,040 samples, 0.04%)</title><rect x="11.2" y="389" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="14.21" y="399.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="11.1" y="325" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="14.10" y="335.5" ></text>
</g>
<g >
<title>handle_softirqs (10,101,010 samples, 0.01%)</title><rect x="33.5" y="373" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="36.51" y="383.5" ></text>
</g>
<g >
<title>tcp_send_ack (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="277" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1148.51" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="33.5" y="421" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="36.51" y="431.5" ></text>
</g>
<g >
<title>mas_store_gfp (10,101,010 samples, 0.01%)</title><rect x="11.1" y="405" width="0.1" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="14.10" y="415.5" ></text>
</g>
<g >
<title>vma_alloc_folio (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="389" width="0.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1190.03" y="399.5" ></text>
</g>
<g >
<title>void BM_Erase&lt;OwnHashMap, GoodHash&gt; (575,757,570 samples, 0.53%)</title><rect x="1152.9" y="469" width="6.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1155.87" y="479.5" ></text>
</g>
<g >
<title>benchmark::internal::BenchmarkRunner::DoNIterations (105,767,675,710 samples, 97.48%)</title><rect x="16.0" y="517" width="1150.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="19.04" y="527.5" >benchmark::internal::BenchmarkRunner::DoNIterations</text>
</g>
<g >
<title>__dev_queue_xmit (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="101" width="0.1" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1148.51" y="111.5" ></text>
</g>
<g >
<title>__alloc_pages (40,404,040 samples, 0.04%)</title><rect x="1175.5" y="357" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1178.50" y="367.5" ></text>
</g>
<g >
<title>sysmalloc (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="533" width="0.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1189.92" y="543.5" ></text>
</g>
<g >
<title>do_user_addr_fault (383,838,380 samples, 0.35%)</title><rect x="1134.7" y="389" width="4.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1137.75" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (181,818,180 samples, 0.17%)</title><rect x="10.9" y="501" width="2.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.88" y="511.5" ></text>
</g>
<g >
<title>exc_page_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="501" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1189.92" y="511.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (20,202,020 samples, 0.02%)</title><rect x="1176.0" y="357" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1179.05" y="367.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.01%)</title><rect x="12.4" y="213" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="15.42" y="223.5" ></text>
</g>
<g >
<title>folio_batch_move_lru (20,202,020 samples, 0.02%)</title><rect x="1138.0" y="277" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1141.04" y="287.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (20,202,020 samples, 0.02%)</title><rect x="1136.0" y="293" width="0.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1138.95" y="303.5" ></text>
</g>
<g >
<title>lock_vma_under_rcu (20,202,020 samples, 0.02%)</title><rect x="1138.7" y="373" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1141.70" y="383.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (10,101,010 samples, 0.01%)</title><rect x="1135.7" y="325" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1138.73" y="335.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.01%)</title><rect x="1152.8" y="453" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1155.76" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="373" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1190.03" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_unhook (10,101,010 samples, 0.01%)</title><rect x="1166.1" y="453" width="0.1" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1169.05" y="463.5" ></text>
</g>
<g >
<title>ip_finish_output (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="165" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1148.51" y="175.5" ></text>
</g>
<g >
<title>alloc_anon_folio (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="405" width="0.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1190.03" y="415.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="501" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1179.93" y="511.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (10,101,010 samples, 0.01%)</title><rect x="1142.8" y="389" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1145.76" y="399.5" ></text>
</g>
<g >
<title>get_vma_policy (10,101,010 samples, 0.01%)</title><rect x="1175.9" y="373" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1178.94" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.01%)</title><rect x="1164.1" y="389" width="0.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1167.08" y="399.5" ></text>
</g>
<g >
<title>handle_softirqs (10,101,010 samples, 0.01%)</title><rect x="11.1" y="309" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="14.10" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (333,333,330 samples, 0.31%)</title><rect x="1135.1" y="357" width="3.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1138.08" y="367.5" ></text>
</g>
<g >
<title>folio_add_lru (30,303,030 samples, 0.03%)</title><rect x="1176.0" y="389" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1179.05" y="399.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="517" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1179.93" y="527.5" ></text>
</g>
<g >
<title>__tcp_send_ack.part.0 (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="261" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1148.51" y="271.5" ></text>
</g>
<g >
<title>ip_finish_output2 (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="133" width="0.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1148.51" y="143.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.01%)</title><rect x="1137.9" y="229" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1140.93" y="239.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (1,565,656,550 samples, 1.44%)</title><rect x="16.6" y="469" width="17.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="19.59" y="479.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MediumHash&gt;::erase (40,404,040 samples, 0.04%)</title><rect x="1159.5" y="453" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1162.46" y="463.5" ></text>
</g>
<g >
<title>tcp_delack_timer_handler (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="293" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1148.51" y="303.5" ></text>
</g>
<g >
<title>_int_free (20,202,020 samples, 0.02%)</title><rect x="10.3" y="501" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="13.33" y="511.5" ></text>
</g>
<g >
<title>clear_page_rep (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="325" width="0.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1190.03" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (30,303,030 samples, 0.03%)</title><rect x="1165.1" y="437" width="0.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1168.06" y="447.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (10,101,010 samples, 0.01%)</title><rect x="12.4" y="197" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="15.42" y="207.5" ></text>
</g>
<g >
<title>unmap_vmas (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="389" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1169.71" y="399.5" ></text>
</g>
<g >
<title>folio_lruvec_lock_irqsave (10,101,010 samples, 0.01%)</title><rect x="1138.3" y="277" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1141.26" y="287.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (70,707,070 samples, 0.07%)</title><rect x="1148.8" y="453" width="0.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1151.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (10,101,010 samples, 0.01%)</title><rect x="1159.0" y="453" width="0.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1162.02" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (121,212,120 samples, 0.11%)</title><rect x="1136.7" y="277" width="1.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1139.72" y="287.5" ></text>
</g>
<g >
<title>ip_local_out (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="197" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1148.51" y="207.5" ></text>
</g>
<g >
<title>mas_store_prealloc (10,101,010 samples, 0.01%)</title><rect x="10.9" y="405" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="13.88" y="415.5" ></text>
</g>
<g >
<title>_int_malloc (10,101,010 samples, 0.01%)</title><rect x="10.1" y="469" width="0.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="13.11" y="479.5" ></text>
</g>
<g >
<title>run_timer_softirq (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="357" width="0.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1148.51" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_writev (10,101,010 samples, 0.01%)</title><rect x="10.7" y="453" width="0.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="13.66" y="463.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MediumHash&gt;::rehash (323,232,320 samples, 0.30%)</title><rect x="1161.1" y="437" width="3.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="1164.11" y="447.5" ></text>
</g>
<g >
<title>alloc_anon_folio (50,505,050 samples, 0.05%)</title><rect x="1175.5" y="405" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1178.50" y="415.5" ></text>
</g>
<g >
<title>try_charge_memcg (10,101,010 samples, 0.01%)</title><rect x="1136.2" y="293" width="0.1" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1139.17" y="303.5" ></text>
</g>
<g >
<title>[unknown] (106,343,433,280 samples, 98.01%)</title><rect x="10.1" y="533" width="1156.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.11" y="543.5" >[unknown]</text>
</g>
<g >
<title>rcu_core_si (10,101,010 samples, 0.01%)</title><rect x="11.1" y="293" width="0.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="14.10" y="303.5" ></text>
</g>
<g >
<title>[[vdso]] (10,101,010 samples, 0.01%)</title><rect x="16.4" y="469" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="19.37" y="479.5" ></text>
</g>
<g >
<title>e1000_xmit_frame (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="37" width="0.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1148.51" y="47.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.01%)</title><rect x="1166.5" y="501" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1169.49" y="511.5" ></text>
</g>
<g >
<title>__rcu_read_lock (10,101,010 samples, 0.01%)</title><rect x="1136.4" y="293" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1139.39" y="303.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (10,101,010 samples, 0.01%)</title><rect x="1186.8" y="533" width="0.1" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1189.81" y="543.5" ></text>
</g>
<g >
<title>neigh_hh_output (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="117" width="0.1" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1148.51" y="127.5" ></text>
</g>
<g >
<title>__pte_offset_map_lock (20,202,020 samples, 0.02%)</title><rect x="1136.3" y="309" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1139.28" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (40,404,040 samples, 0.04%)</title><rect x="11.2" y="325" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="14.21" y="335.5" ></text>
</g>
<g >
<title>all (108,505,049,420 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.01%)</title><rect x="10.7" y="501" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.66" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="501" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1169.71" y="511.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (20,202,020 samples, 0.02%)</title><rect x="1164.1" y="421" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1167.08" y="431.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.02%)</title><rect x="1165.8" y="453" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1168.83" y="463.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (40,404,040 samples, 0.04%)</title><rect x="11.2" y="357" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="14.21" y="367.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.01%)</title><rect x="1166.2" y="453" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1169.16" y="463.5" ></text>
</g>
<g >
<title>__munmap (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="533" width="0.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1169.71" y="543.5" ></text>
</g>
<g >
<title>handle_mm_fault (333,333,330 samples, 0.31%)</title><rect x="1135.1" y="373" width="3.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1138.08" y="383.5" ></text>
</g>
<g >
<title>irqentry_exit (10,101,010 samples, 0.01%)</title><rect x="1145.6" y="405" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1148.62" y="415.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="517" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1169.27" y="527.5" ></text>
</g>
<g >
<title>mas_wr_append (10,101,010 samples, 0.01%)</title><rect x="10.9" y="373" width="0.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="13.88" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.01%)</title><rect x="10.7" y="245" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="13.66" y="255.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.04%)</title><rect x="10.1" y="517" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.11" y="527.5" ></text>
</g>
<g >
<title>lab1 (108,505,049,420 samples, 100.00%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >lab1</text>
</g>
<g >
<title>folio_add_lru (30,303,030 samples, 0.03%)</title><rect x="1138.0" y="293" width="0.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1141.04" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (90,909,090 samples, 0.08%)</title><rect x="1175.5" y="421" width="1.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1178.50" y="431.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (262,626,260 samples, 0.24%)</title><rect x="1142.9" y="421" width="2.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1145.87" y="431.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (60,606,060 samples, 0.06%)</title><rect x="1134.1" y="421" width="0.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1137.09" y="431.5" ></text>
</g>
<g >
<title>mas_find (10,101,010 samples, 0.01%)</title><rect x="12.6" y="421" width="0.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="15.64" y="431.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GoodHash&gt;::erase (20,202,020 samples, 0.02%)</title><rect x="1153.2" y="453" width="0.2" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1156.20" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_brk (171,717,170 samples, 0.16%)</title><rect x="10.9" y="453" width="1.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="13.88" y="463.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="517" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1189.92" y="527.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (10,101,010 samples, 0.01%)</title><rect x="12.4" y="261" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="15.42" y="271.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (20,202,020 samples, 0.02%)</title><rect x="1145.7" y="437" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1148.73" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_clock_gettime (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="437" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1169.27" y="447.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MediumHash&gt;::insert (535,353,530 samples, 0.49%)</title><rect x="1159.9" y="453" width="5.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1162.90" y="463.5" ></text>
</g>
<g >
<title>do_vmi_munmap (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="437" width="0.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1169.71" y="447.5" ></text>
</g>
<g >
<title>exc_page_fault (383,838,380 samples, 0.35%)</title><rect x="1134.7" y="405" width="4.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1137.75" y="415.5" ></text>
</g>
<g >
<title>__mpn_mul_1 (10,101,010 samples, 0.01%)</title><rect x="13.3" y="501" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="16.30" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (20,202,020 samples, 0.02%)</title><rect x="1157.9" y="437" width="0.2" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1160.92" y="447.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.01%)</title><rect x="12.7" y="485" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="15.75" y="495.5" ></text>
</g>
<g >
<title>_int_free (242,424,240 samples, 0.22%)</title><rect x="13.4" y="517" width="2.6" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="16.41" y="527.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.01%)</title><rect x="1158.8" y="453" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1161.80" y="463.5" ></text>
</g>
<g >
<title>operator new (60,606,060 samples, 0.06%)</title><rect x="1150.7" y="453" width="0.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1153.67" y="463.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (10,101,010 samples, 0.01%)</title><rect x="1156.8" y="421" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1159.83" y="431.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.01%)</title><rect x="10.7" y="261" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="13.66" y="271.5" ></text>
</g>
<g >
<title>__alloc_pages (111,111,110 samples, 0.10%)</title><rect x="1136.8" y="261" width="1.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1139.83" y="271.5" ></text>
</g>
<g >
<title>asm_common_interrupt (10,101,010 samples, 0.01%)</title><rect x="1142.8" y="437" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1145.76" y="447.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (30,303,030 samples, 0.03%)</title><rect x="1138.4" y="293" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1141.37" y="303.5" ></text>
</g>
<g >
<title>__do_sys_brk (171,717,170 samples, 0.16%)</title><rect x="10.9" y="437" width="1.8" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="13.88" y="447.5" ></text>
</g>
<g >
<title>do_user_addr_fault (151,515,150 samples, 0.14%)</title><rect x="1175.3" y="485" width="1.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1178.28" y="495.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (10,101,010 samples, 0.01%)</title><rect x="10.7" y="405" width="0.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="13.66" y="415.5" ></text>
</g>
<g >
<title>filemap_alloc_folio (10,101,010 samples, 0.01%)</title><rect x="10.7" y="309" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.66" y="319.5" ></text>
</g>
<g >
<title>folio_add_new_anon_rmap (30,303,030 samples, 0.03%)</title><rect x="1138.4" y="309" width="0.3" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1141.37" y="319.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (10,101,010 samples, 0.01%)</title><rect x="1158.3" y="453" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1161.25" y="463.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="469" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1179.93" y="479.5" ></text>
</g>
<g >
<title>benchmark::internal::BenchmarkInstance::Run (105,767,675,710 samples, 97.48%)</title><rect x="16.0" y="485" width="1150.3" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="19.04" y="495.5" >benchmark::internal::BenchmarkInstance::Run</text>
</g>
<g >
<title>__GI___writev (10,101,010 samples, 0.01%)</title><rect x="10.7" y="517" width="0.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.66" y="527.5" ></text>
</g>
<g >
<title>irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="33.5" y="405" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="36.51" y="415.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (10,101,010 samples, 0.01%)</title><rect x="10.7" y="213" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="13.66" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="469" width="0.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1169.71" y="479.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (70,707,070 samples, 0.07%)</title><rect x="1138.9" y="421" width="0.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1141.92" y="431.5" ></text>
</g>
<g >
<title>_int_free (111,111,110 samples, 0.10%)</title><rect x="1166.8" y="533" width="1.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1169.82" y="543.5" ></text>
</g>
<g >
<title>ip_output (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="181" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1148.51" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.01%)</title><rect x="10.7" y="485" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.66" y="495.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="11.1" y="357" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="14.10" y="367.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="33.5" y="437" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="36.51" y="447.5" ></text>
</g>
<g >
<title>sch_direct_xmit (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="69" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1148.51" y="79.5" ></text>
</g>
<g >
<title>__memcpy_ssse3 (282,828,280 samples, 0.26%)</title><rect x="1139.7" y="437" width="3.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1142.69" y="447.5" ></text>
</g>
<g >
<title>do_anonymous_page (262,626,260 samples, 0.24%)</title><rect x="1135.8" y="325" width="2.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1138.84" y="335.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.02%)</title><rect x="1164.7" y="437" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1167.73" y="447.5" ></text>
</g>
<g >
<title>_int_malloc (828,282,820 samples, 0.76%)</title><rect x="1168.0" y="533" width="9.0" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1171.03" y="543.5" ></text>
</g>
<g >
<title>malloc (20,202,020 samples, 0.02%)</title><rect x="1158.5" y="453" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1161.47" y="463.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (10,101,010 samples, 0.01%)</title><rect x="33.5" y="389" width="0.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="36.51" y="399.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GoodHash&gt;::rehash (222,222,220 samples, 0.20%)</title><rect x="1155.0" y="437" width="2.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1157.96" y="447.5" ></text>
</g>
<g >
<title>__mpn_mul (10,101,010 samples, 0.01%)</title><rect x="13.2" y="485" width="0.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="16.19" y="495.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.01%)</title><rect x="1158.4" y="453" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1161.36" y="463.5" ></text>
</g>
<g >
<title>zap_pte_range (90,909,090 samples, 0.08%)</title><rect x="11.6" y="325" width="1.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="14.65" y="335.5" ></text>
</g>
<g >
<title>x64_sys_call (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="453" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1169.27" y="463.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (90,909,090 samples, 0.08%)</title><rect x="11.6" y="341" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="14.65" y="351.5" ></text>
</g>
<g >
<title>malloc@plt (20,202,020 samples, 0.02%)</title><rect x="1150.3" y="453" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1153.34" y="463.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (151,515,150 samples, 0.14%)</title><rect x="1175.3" y="517" width="1.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1178.28" y="527.5" ></text>
</g>
<g >
<title>__run_timers (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="341" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1148.51" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (252,525,250 samples, 0.23%)</title><rect x="1142.9" y="405" width="2.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1145.87" y="415.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (141,414,140 samples, 0.13%)</title><rect x="11.1" y="421" width="1.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="14.10" y="431.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1165.0" y="437" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1167.95" y="447.5" ></text>
</g>
<g >
<title>alloc_pages (20,202,020 samples, 0.02%)</title><rect x="12.3" y="277" width="0.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="15.31" y="287.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (161,616,160 samples, 0.15%)</title><rect x="1147.0" y="437" width="1.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1150.05" y="447.5" ></text>
</g>
<g >
<title>call_timer_fn (10,101,010 samples, 0.01%)</title><rect x="1145.5" y="325" width="0.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1148.51" y="335.5" ></text>
</g>
<g >
<title>zap_pte_range (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="325" width="0.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1169.71" y="335.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="341" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1169.71" y="351.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (20,202,020 samples, 0.02%)</title><rect x="1175.7" y="309" width="0.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1178.72" y="319.5" ></text>
</g>
<g >
<title>__rmqueue_pcplist (10,101,010 samples, 0.01%)</title><rect x="1137.9" y="213" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1140.93" y="223.5" ></text>
</g>
<g >
<title>unlink_chunk.constprop.0 (262,626,260 samples, 0.24%)</title><rect x="1187.1" y="533" width="2.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1190.14" y="543.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="341" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1190.03" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.01%)</title><rect x="1187.0" y="357" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1190.03" y="367.5" ></text>
</g>
<g >
<title>rmqueue (20,202,020 samples, 0.02%)</title><rect x="1175.7" y="325" width="0.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1178.72" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (20,202,020 samples, 0.02%)</title><rect x="1138.0" y="261" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1141.04" y="271.5" ></text>
</g>
<g >
<title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (30,303,030 samples, 0.03%)</title><rect x="1164.3" y="421" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1167.30" y="431.5" ></text>
</g>
<g >
<title>__vfprintf_internal (50,505,050 samples, 0.05%)</title><rect x="12.9" y="517" width="0.5" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="15.86" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="485" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1169.27" y="495.5" ></text>
</g>
<g >
<title>handle_softirqs (252,525,250 samples, 0.23%)</title><rect x="1142.9" y="373" width="2.7" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1145.87" y="383.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.01%)</title><rect x="1158.9" y="453" width="0.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1161.91" y="463.5" ></text>
</g>
<g >
<title>operator delete (20,202,020 samples, 0.02%)</title><rect x="1157.6" y="437" width="0.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1160.59" y="447.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, BadHash&gt;::erase (50,505,050 samples, 0.05%)</title><rect x="37.5" y="453" width="0.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="40.46" y="463.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, BadHash&gt;::insert (102,141,413,120 samples, 94.14%)</title><rect x="38.0" y="453" width="1110.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="41.01" y="463.5" >OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, BadHash&gt;::insert</text>
</g>
<g >
<title>memcpy@plt (10,101,010 samples, 0.01%)</title><rect x="1158.7" y="453" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1161.69" y="463.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.01%)</title><rect x="10.2" y="485" width="0.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="13.22" y="495.5" ></text>
</g>
<g >
<title>rcu_core (60,606,060 samples, 0.06%)</title><rect x="1144.9" y="341" width="0.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1147.85" y="351.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (10,101,010 samples, 0.01%)</title><rect x="10.7" y="389" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="13.66" y="399.5" ></text>
</g>
<g >
<title>unmap_page_range (90,909,090 samples, 0.08%)</title><rect x="11.6" y="357" width="1.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="14.65" y="367.5" ></text>
</g>
<g >
<title>generic_perform_write (10,101,010 samples, 0.01%)</title><rect x="10.7" y="357" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.66" y="367.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GoodHash&gt;::insert (10,101,010 samples, 0.01%)</title><rect x="16.2" y="469" width="0.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="19.15" y="479.5" ></text>
</g>
<g >
<title>[unknown] (20,202,020 samples, 0.02%)</title><rect x="10.1" y="501" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.11" y="511.5" ></text>
</g>
<g >
<title>OwnHashMap&lt;int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GoodHash&gt;::insert (444,444,440 samples, 0.41%)</title><rect x="1153.4" y="453" width="4.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1156.42" y="463.5" ></text>
</g>
<g >
<title>get_page_from_freelist (90,909,090 samples, 0.08%)</title><rect x="1137.1" y="245" width="0.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1140.05" y="255.5" ></text>
</g>
<g >
<title>vfs_writev (10,101,010 samples, 0.01%)</title><rect x="10.7" y="421" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="13.66" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (171,717,170 samples, 0.16%)</title><rect x="10.9" y="485" width="1.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.88" y="495.5" ></text>
</g>
<g >
<title>[[vdso]] (1,505,050,490 samples, 1.39%)</title><rect x="17.3" y="453" width="16.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="20.25" y="463.5" ></text>
</g>
<g >
<title>__alloc_pages (10,101,010 samples, 0.01%)</title><rect x="1136.6" y="277" width="0.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1139.61" y="287.5" ></text>
</g>
<g >
<title>handle_softirqs (10,101,010 samples, 0.01%)</title><rect x="1176.9" y="453" width="0.1" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1179.93" y="463.5" ></text>
</g>
<g >
<title>operator delete (70,707,070 samples, 0.07%)</title><rect x="1146.3" y="437" width="0.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1149.28" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_unhook (20,202,020 samples, 0.02%)</title><rect x="1152.4" y="453" width="0.3" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1155.43" y="463.5" ></text>
</g>
<g >
<title>vma_alloc_folio (50,505,050 samples, 0.05%)</title><rect x="1175.5" y="389" width="0.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1178.50" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (383,838,380 samples, 0.35%)</title><rect x="1134.7" y="421" width="4.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1137.75" y="431.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (10,101,010 samples, 0.01%)</title><rect x="1136.5" y="293" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1139.50" y="303.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.01%)</title><rect x="12.4" y="229" width="0.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="15.42" y="239.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (30,303,030 samples, 0.03%)</title><rect x="1145.2" y="293" width="0.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1148.18" y="303.5" ></text>
</g>
<g >
<title>cpu_clock_sample (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="389" width="0.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1169.27" y="399.5" ></text>
</g>
<g >
<title>unmap_page_range (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="357" width="0.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1169.71" y="367.5" ></text>
</g>
<g >
<title>alloc_anon_folio (141,414,140 samples, 0.13%)</title><rect x="1136.5" y="309" width="1.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1139.50" y="319.5" ></text>
</g>
<g >
<title>__folio_throttle_swaprate (10,101,010 samples, 0.01%)</title><rect x="1135.6" y="325" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1138.62" y="335.5" ></text>
</g>
<g >
<title>__folio_throttle_swaprate (10,101,010 samples, 0.01%)</title><rect x="1186.9" y="405" width="0.1" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1189.92" y="415.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (30,303,030 samples, 0.03%)</title><rect x="1176.0" y="405" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1179.05" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.02%)</title><rect x="1186.9" y="485" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1189.92" y="495.5" ></text>
</g>
<g >
<title>mas_walk (10,101,010 samples, 0.01%)</title><rect x="12.6" y="405" width="0.1" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="15.64" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (10,101,010 samples, 0.01%)</title><rect x="10.0" y="533" width="0.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>posix_cpu_clock_get (10,101,010 samples, 0.01%)</title><rect x="1166.3" y="405" width="0.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1169.27" y="415.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (10,101,010 samples, 0.01%)</title><rect x="11.1" y="373" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="14.10" y="383.5" ></text>
</g>
<g >
<title>unmap_single_vma (10,101,010 samples, 0.01%)</title><rect x="1166.7" y="373" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1169.71" y="383.5" ></text>
</g>
<g >
<title>malloc@plt (10,101,010 samples, 0.01%)</title><rect x="1146.1" y="437" width="0.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1149.06" y="447.5" ></text>
</g>
</g>
</svg>
